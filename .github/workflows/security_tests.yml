name: Security Tests

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays
  workflow_dispatch:     # Allow manual triggering when needed

env:
  CARGO_TERM_COLOR: always

jobs:
  security-tests:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-
    
    - name: Check for security vulnerabilities
      run: |
        cargo install cargo-audit --force
        cargo audit
    
    - name: Run Clippy with security lints
      run: |
        cargo clippy --all-targets --all-features -- -D warnings -W clippy::all -A clippy::pedantic -A clippy::nursery -A clippy::format_push_string -A clippy::struct_field_names -A clippy::unused_self
    
    - name: Run unit tests
      run: |
        cargo test --all-features
    
    - name: Generate coverage report
      run: |
        cargo install cargo-llvm-cov --force
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./lcov.info
        fail_ci_if_error: false

  fuzz-tests:
    runs-on: macos-latest
    needs: security-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly  # Fuzzing requires nightly
        override: true
        components: rustfmt,clippy,rust-src,llvm-tools-preview
    
    - name: Install cargo-fuzz
      run: |
        cargo install cargo-fuzz --force
    
    - name: Run fuzz tests
      run: |
        # Run each fuzzer for a short duration (1 minute each)
        echo "Running memory_fuzz..."
        timeout 60s cargo fuzz run memory_fuzz -- -max_total_time=60 || echo "Fuzzing completed or timed out"
        
        echo "Running command_fuzz..."
        timeout 60s cargo fuzz run command_fuzz -- -max_total_time=60 || echo "Fuzzing completed or timed out"
        
        echo "Running dwarf_fuzz..."
        timeout 60s cargo fuzz run dwarf_fuzz -- -max_total_time=60 || echo "Fuzzing completed or timed out"
        
        echo "Running symbol_fuzz..."
        timeout 60s cargo fuzz run symbol_fuzz -- -max_total_time=60 || echo "Fuzzing completed or timed out"
        
    - name: Save fuzz corpus
      run: |
        # Create artifact with fuzz corpus for future runs
        mkdir -p fuzz_corpus
        cp -r fuzz/corpus/* fuzz_corpus/ || true
        
    - name: Upload fuzz corpus
      uses: actions/upload-artifact@v3
      with:
        name: fuzz-corpus
        path: fuzz_corpus/
        retention-days: 30 